#+title: Adventure of Code, 2024, день 21, =Rust=

Обидві частини вирішуються за допомогою єдиного параметризованого коду.

* Головний файл

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day21.rs
  <<day21:Декларації>>

  <<day21:Визначення>>

  fn main() {
      <<day21:Прочитати-дані>>
      let mut result = 0;
      <<day21:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядки із файла.

#+begin_src rust :noweb-ref day21:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day21:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let lines = io::BufReader::new(file)
      .lines()
      .map(|line| line.unwrap());
#+end_src

* Точки

#+begin_src rust :noweb yes :noweb-ref day21:Визначення
  type Point = (isize, isize);
#+end_src

** Кодування

Ці функції перетворюють символи на панелі в точки з координатами у просторі. Функція ~num~ визначає
панель номерів, а функція ~cmd~ --- панель команд роботів.

#+begin_src rust :noweb-ref day21:Визначення
  fn from_num(c: char) -> Point {
      match c {
          'A' => (3, 2),
          '0' => (3, 1),
          '1' => (2, 0),
          '2' => (2, 1),
          '3' => (2, 2),
          '4' => (1, 0),
          '5' => (1, 1),
          '6' => (1, 2),
          '7' => (0, 0),
          '8' => (0, 1),
          '9' => (0, 2),
          c => panic!("Unexpected num {}", c)
      }
  }

  fn from_cmd(c: char) -> Point {
      match c {
          'A' => (0, 2),
          '^' => (0, 1),
          '<' => (1, 0),
          'v' => (1, 1),
          '>' => (1, 2),
          c => panic!("Unexpected num {}", c)
      }
  }
#+end_src

** COMMENT Декодування

Зворотні функції використовуються тільки для відлагодження, оскільки для ефективності усі фрагменти
представляються як послідовності точок.

#+begin_src rust :noweb-ref day21:Визначення
  fn to_num(p: Point) -> char {
      match p {
          (3, 2) => 'A',
          (3, 1) => '0',
          (2, 0) => '1',
          (2, 1) => '2',
          (2, 2) => '3',
          (1, 0) => '4',
          (1, 1) => '5',
          (1, 2) => '6',
          (0, 0) => '7',
          (0, 1) => '8',
          (0, 2) => '9',
          p => panic!("Unexpected point {:?}", p)
      }
  }

  fn to_cmd(p: Point) -> char {
      match p {
          (0, 2) => 'A',
          (0, 1) => '^',
          (1, 0) => '<',
          (1, 1) => 'v',
          (1, 2) => '>',
          p => panic!("Unexpected point {:?}", p)
      }
  }
#+end_src

** Пропуски

Маємо два /пропуски/ (=gap=), окремо для панелі номерів і для панелі команд, в яких відсутні
кнопки. Захід роботів в ці точки заборонено.

#+begin_src rust :noweb-ref day21:Визначення
  const NUM_GAP: Point = (3, 0);
  const CMD_GAP: Point = (0, 0);
#+end_src

* Фрагменти

/Фрагмент/ (=snippet=) представляє собою послідовність точок на панелях. Особливим типом фрагмента є
/програма/ --- фрагмент, який виконується людиною, в результаті якого вводиться весь код.

#+begin_src rust :noweb-ref day21:Визначення
  type Snippet = Vec<Point>;
#+end_src

** COMMENT Декодування

Для відлагодження реалізуємо функції ~snippet_to_num~ і ~snippet_to_cmd~.

#+begin_src rust :noweb-ref day21:Визначення
  fn show_num(snippet: Snippet) -> String {
      snippet.into_iter().map(to_num).collect()
  }

  fn show_cmd(snippet: Snippet) -> String {
      snippet.into_iter().map(to_cmd).collect()
  }
#+end_src

* Переміщення

Назвемо /переміщенням/ (=move=) будь-який шлях між парою точок, по якому має переміщатися маніпулятор. В
загальному випадку для двох довільних точок переміщення може виконуватись різними шляхами, при цьому
кожному шляху відповідає свій фрагмент. Шлях переміщення не може проходити через пропуск.

Пошук переміщень виконується рекурсивно за допомогою функції ~move~. Однак, для ефективності
використовуємо техніку =мемоізації=, тобто, зберігаємо множину (для простоти вона представлена вектором)
усіх фрагментів у мапі ~moves_memo~. Якщо для заданої комбінації початкової та кінцевої точок, а також
пропуску, множина переміщень вже обчислена, просто повертаємо її.

#+begin_src rust :noweb-ref day21:Визначення
  type MovesMemo = BTreeMap<(Point, Point, Point), Vec<Snippet>>;
#+end_src

#+begin_src rust :noweb yes :noweb-ref day21:Визначення
  fn moves(from: Point, to: Point, gap: Point, moves_memo: &mut MovesMemo) -> Vec<Snippet> {
      if let Some(result) = moves_memo.get(&(from, to, gap)) { return result.to_vec(); }
      let mut result = vec![];
      <<day21:moves:Дії>>
      moves_memo.insert((from, to, gap), result.clone());
      result
  }
#+end_src

Якщо точки співпадають, то результатом є множина тільки із одого фрагмента з однією командою натискання
(~A~).

#+begin_src rust :noweb yes :noweb-ref day21:moves:Дії
  if from == to { return vec![vec![from_cmd('A')]]; }
#+end_src

Визначимо різницю між точками.

#+begin_src rust :noweb yes :noweb-ref day21:moves:Дії
  let (dr, dc) = (to.0 - from.0, to.1 - from.1);
#+end_src

Перевіримо крок по вертикалі (по рядках, ~dr~).

#+begin_src rust :noweb-ref day21:Декларації
  use std::{cmp::Ordering, iter};
#+end_src

#+begin_src rust :noweb yes :noweb-ref day21:moves:Дії
  if let Some((d, point)) = match dr.cmp(&0) {
      Ordering::Greater => Some((1, from_cmd('v'))),
      Ordering::Less => Some((-1, from_cmd('^'))),
      Ordering::Equal => None
  } {
      if (from.0 + d, from.1) != gap {
          result.extend(
              moves((from.0 + d, from.1), to, gap, moves_memo)
                  .into_iter()
                  .map(|move_| iter::once(point).chain(move_.into_iter()).collect()));
      }
  }
#+end_src

Перевіримо крок по горизонталі (по стовпцях, ~dc~).

#+begin_src rust :noweb yes :noweb-ref day21:moves:Дії
  if let Some((d, point)) = match dc.cmp(&0) {
      Ordering::Greater => Some((1, from_cmd('>'))),
      Ordering::Less => Some((-1, from_cmd('<'))),
      Ordering::Equal => None
  } {
      if (from.0, from.1 + d) != gap {
          result.extend(
              moves((from.0, from.1 + d), to, gap, moves_memo)
                  .into_iter()
                  .map(|move_| iter::once(point).chain(move_.into_iter()).collect()));
      }
  }
#+end_src

Мапа переміщень є глобальною.

#+begin_src rust :noweb yes :noweb-ref day21:Декларації
  use std::collections::BTreeMap;
#+end_src

#+begin_src rust :noweb yes :noweb-ref day21:Дії
  let mut moves_memo: MovesMemo = BTreeMap::new();
#+end_src

* Ранг

Назвемо /рангом/ (=rank=) кількість проміжних панелей. Коли ранг дорівнює ~0~, це значить, що усі кнопки
натискає безпосередньо людина. В такому разі розмір програми співпадає з розміром фрагмента. Коли кнопки
на панелі номерів натискає робот, а людина керує ним через свою панель, то це задача рангу ~1~.

#+begin_src rust :noweb-ref day21:Визначення
  type Rank = usize;
#+end_src

За умовами задачі в першій частині ранг дорівнює ~3~, а в другій --- ~26~. Отримаємо ранг з другого
аргумента програми.

#+begin_src rust :noweb-ref day21:Прочитати-дані
  let rank = args[2].parse::<Rank>().unwrap();
#+end_src

* COMMENT Пошук оптимальної програми для фрагмента

Нехай ми маємо фрагмент ~snippet~, для якого ми маємо знайти оптимальне рішення ранга ~rank~. Оскільки
фрагмент завданий абстрактно, нам потрібно також знати конкретне значення пропуску ~gap~.

Пошук виконується рекурсивно за допомогою функції ~find_program~.

#+begin_src rust :noweb yes :noweb-ref day21:Визначення
  fn find_program(snippet: Snippet, gap: Point, rank: Rank, moves_memo: &mut MovesMemo) -> Snippet {
      <<day21:find-program:Дії>>
  }
#+end_src

Для нульового ранга результат співпадає з самим фрагментом, але без початкової точки (~A~).

#+begin_src rust :noweb yes :noweb-ref day21:find-program:Дії
  if rank == 0 { return snippet[1..].to_vec(); }
#+end_src

Перебираємо всі пари послідовних точок фрагмента, для кожної пари отримуємо оптимальну (найкоротшу)
програму, і нам залишається лише об'єднати ці програми в один фінальний фрагмент-програму.

#+begin_src rust :noweb yes :noweb-ref day21:find-program:Дії
  (0..snippet.len() - 1)
      .flat_map(|i| {
          <<day21:find-program:Знайти-оптимальну-програму>>
      })
      .collect()
#+end_src

Для пошуку оптимальної програми визначаємо перелік переміщень, і для кожного переміщення шукаємо
оптимальну (найкоротшу) програму наступного рангу (на ~1~ менше). При цьому ми завжди використовуємо
панель команд, тому використовуємо пропуск на цій панелі. Для усіх отриманих переміщень обираємо у якості
оптимальної найкоротшу програму.

#+begin_src rust :noweb yes :noweb-ref day21:find-program:Знайти-оптимальну-програму
  moves(snippet[i], snippet[i+1], gap, moves_memo)
      .into_iter()
      .map(|move_| find_program(iter::once(from_cmd('A')).chain(move_.into_iter()).collect(), CMD_GAP, rank - 1, moves_memo))
      .min_by_key(|program| program.len())
      .unwrap()
#+end_src

* Пошук довжини оптимальної програми для фрагмента

Цей варіант оптимізований для того, щоб обробляти лише числову довжину програми, яка тільки і потрібна.

При пошуку використовуємо =мемоізацію= по фрагментах, пропуску і рангу.

#+begin_src rust :noweb yes :noweb-ref day21:Визначення
  type FindMemo = BTreeMap<(Snippet, Point, Rank), usize>;
#+end_src

#+begin_src rust :noweb yes :noweb-ref day21:Дії
  let mut find_memo = BTreeMap::new();
#+end_src

#+begin_src rust :noweb yes :noweb-ref day21:Визначення
  fn find_len(
      snippet: Snippet, gap: Point, rank: Rank,
      moves_memo: &mut MovesMemo, find_memo: &mut FindMemo) -> usize {
      if let Some(result) = find_memo.get(&(snippet.clone(), gap, rank)) { return *result; }
      <<day21:find-len:Дії>>
      find_memo.insert((snippet, gap, rank), result);
      result
  }
#+end_src

Для нульового ранга результат співпадає з самим фрагментом, але без початкової точки (~A~).

#+begin_src rust :noweb yes :noweb-ref day21:find-len:Дії
  if rank == 0 { return snippet.len() - 1; }
#+end_src

Перебираємо всі пари послідовних точок фрагмента, для кожної пари отримуємо оптимальну (найкоротшу)
програму, і нам залишається лише об'єднати ці програми в один фінальний фрагмент-програму.

#+begin_src rust :noweb yes :noweb-ref day21:find-len:Дії
  let result = (0..snippet.len() - 1)
      .map(|i| {
          <<day21:find-len:Знайти-довжину-оптимальної-програми>>
      })
      .sum();
#+end_src

Для пошуку оптимальної програми визначаємо перелік переміщень, і для кожного переміщення шукаємо
оптимальну (найкоротшу) програму наступного рангу (на ~1~ менше). При цьому ми завжди використовуємо
панель команд, тому використовуємо пропуск на цій панелі. Для усіх отриманих переміщень обираємо у якості
оптимальної найкоротшу програму.

#+begin_src rust :noweb yes :noweb-ref day21:find-len:Знайти-довжину-оптимальної-програми
  moves(snippet[i], snippet[i+1], gap, moves_memo)
      .into_iter()
      .map(|move_| find_len(iter::once(from_cmd('A')).chain(move_.into_iter()).collect(), CMD_GAP, rank - 1, moves_memo, find_memo))
      .min()
      .unwrap()
#+end_src

* Обробка кодів

Обробимо кожний код незалежно. Для ефективності коди одразу перепаковуються у вектори точок. Для
визначеності будь-який код починається з точки =A= на панелі номерів.

#+begin_src rust :noweb yes :noweb-ref day21:Дії
  for line in lines {
      let snippet: Snippet = iter::once(from_num('A')).chain(line.chars().map(from_num)).collect();
      let len = find_len(snippet, NUM_GAP, rank, &mut moves_memo, &mut find_memo);
      <<day21:Обробити-код>>
  }
#+end_src

* Обчислення резульата

Обчислимо результат.

#+begin_src rust :noweb yes :noweb-ref day21:Обробити-код
  result += len * line[0..line.len()-1].parse::<usize>().unwrap();
#+end_src
