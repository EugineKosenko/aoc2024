#+title: Adventure of Code, 2024, день 6, =Rust=

* Частина 1

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day6_1.rs
  <<day6:Декларації>>

  <<day6:Визначення>>

  fn main() {
      <<day6:Прочитати-дані>>
      <<day6_1:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядки із файла.

#+begin_src rust :noweb-ref day6:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day6:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let lines = io::BufReader::new(file).lines();
#+end_src

Заповнимо матрицю з рядків.

#+begin_src rust :noweb yes :noweb-ref day6:Прочитати-дані
  let mut grid = grid::Grid::new(0, 0);
  for line in lines {
      grid.push_row(line.unwrap().chars().collect());
  }
#+end_src

* Початкова позиція

Для простоти будемо вказувати поточну позицію значком ~X~. Для цього знайдемо початкову позицію, яка
стане поточною, і помітимо її значком.

#+begin_src rust :noweb-ref day6_1:Дії
  let ((mut row, mut col), _) = grid.indexed_iter()
      .find(|((row, col), _)| *grid.get(*row, *col).unwrap() == '^').unwrap();
  *grid.get_mut(row, col).unwrap() = 'X';
#+end_src

* Напрямок

#+begin_src rust :noweb yes :noweb-ref day6:Визначення
  #[derive(enum_iterator::Sequence, Clone, Ord, Eq, PartialEq, PartialOrd)]
  enum Dir { Up, Right, Down, Left }
#+end_src

Для напрямків створимо нескінчений циклічний ітератор.

#+begin_src rust :noweb-ref day6_1:Дії
  let mut dir = enum_iterator::all::<Dir>().cycle().peekable();
#+end_src

* Пошук шляху

Переміщаємо гвардійця, поки він не досягне краю дошки. Якщо нова позиція блокована, змінюємо напрямок,
інакше переміщуємося в нову позицію і відмічаємо її.

#+begin_src rust :noweb-ref day6_1:Дії
  loop {
      let (nrow, ncol) = match dir.peek().unwrap() {
          Dir::Up => { if row == 0 { break; } else { (row - 1, col) } },
          Dir::Right => { if col == grid.cols() - 1 { break; } else { (row, col + 1) } },
          Dir::Down => { if row == grid.rows() - 1 { break; } else { (row + 1, col) } },
          Dir::Left => { if col == 0 { break; } else { (row, col - 1) } }
      };
      if *grid.get(nrow, ncol).unwrap() == '#' {
          dir.next();
      } else {
          (row, col) = (nrow, ncol);
          ,*grid.get_mut(row, col).unwrap() = 'X';
      }
  }
#+end_src

Підрахуємо кількість позицій.

#+begin_src rust :noweb-ref day6_1:Дії
  let result = grid.iter()
      .filter(|&&pos| pos == 'X')
      .count();
#+end_src

* Частина 2

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day6_2.rs
  <<day6:Декларації>>
  <<day6_2:Декларації>>

  <<day6:Визначення>>

  fn main() {
      let mut result = 0;
      <<day6:Прочитати-дані>>
      <<day6_2:Дії>>
      println!("{}", result);
  }
#+end_src

Встановимо початкову позицію.

#+begin_src rust :noweb-ref day6_2:Дії
  let ((srow, scol), _) = grid.indexed_iter()
      .find(|((row, col), _)| *grid.get(*row, *col).unwrap() == '^').unwrap();
  *grid.get_mut(srow, scol).unwrap() = 'X';
#+end_src

Перебираємо усі позиції дошки для встановлення перешкоди. При цьому дошка вважається кожний раз новою,
тому ми створюємо її копію.

#+begin_src rust :noweb yes :noweb-ref day6_2:Дії
  for orow in 0..grid.rows() {
      for ocol in 0..grid.cols() {
          if *grid.get(orow, ocol).unwrap() == '.' {
              let mut grid = grid.clone();
              ,*grid.get_mut(orow, ocol).unwrap() = '#';
              <<day6_2:Перевірити-перешкоду>>
          }
      }
  }
#+end_src

Встановимо позицію і напрямок.

#+begin_src rust :noweb-ref day6_2:Перевірити-перешкоду
  let (mut row, mut col) = (srow, scol);
  let mut dir = enum_iterator::all::<Dir>().cycle().peekable();
#+end_src

Для виявлення циклів заведемо множину позицій з напрямками. Наявність чергової позиції в цій множині
означатиме виявлений цикл. Спочатку в цій множині є початкова позиція і напрямок.

#+begin_src rust :noweb-ref day6_2:Декларації
  use std::collections::BTreeSet;
#+end_src

#+begin_src rust :noweb-ref day6_2:Перевірити-перешкоду
  let mut pos = BTreeSet::new();
  pos.insert(((row, col), dir.peek().unwrap().clone()));
#+end_src

Шукаємо шлях.

#+begin_src rust :noweb-ref day6_2:Перевірити-перешкоду
  loop {
      let (nrow, ncol) = match dir.peek().unwrap() {
          Dir::Up => { if row == 0 { break; } else { (row - 1, col) } },
          Dir::Right => { if col == grid.cols() - 1 { break; } else { (row, col + 1) } },
          Dir::Down => { if row == grid.rows() - 1 { break; } else { (row + 1, col) } },
          Dir::Left => { if col == 0 { break; } else { (row, col - 1) } }
      };
      if *grid.get(nrow, ncol).unwrap() == '#' {
          dir.next();
      } else {
          (row, col) = (nrow, ncol);
          ,*grid.get_mut(row, col).unwrap() = 'X';
      }
      if pos.contains(&((row, col), dir.peek().unwrap().clone())) {
          result += 1;
          break;
      } else {
          pos.insert(((row, col), dir.peek().unwrap().clone()));
      }
  }
#+end_src

