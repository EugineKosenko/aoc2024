#+title: Adventure of Code, 2024, день 12, =Rust=

* Частина 1

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day12_1.rs
  <<day12:Декларації>>
  <<day12_1:Декларації>>

  <<day12:Визначення>>
  <<day12_1:Визначення>>

  fn main() {
      let mut result: usize = 0;
      <<day12:Прочитати-дані>>
      <<day12_1:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядки із файла.

#+begin_src rust :noweb-ref day12:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day12:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let lines = io::BufReader::new(file)
      .lines()
      .map(|line| line.unwrap());
#+end_src

Створимо множину точок.

#+begin_src rust :noweb-ref day12:Декларації
  use std::collections::BTreeSet;
#+end_src

#+begin_src rust :noweb-ref day12:Прочитати-дані
  let mut plants = BTreeSet::new();
  let (mut rows, mut cols) = (0, 0);
  for (row, line) in lines.enumerate() {
      rows += 1;
      cols = 0;
      for (col, ch) in line.chars().enumerate() {
          cols += 1;
          plants.insert(((row, col), ch));
      }
  }
#+end_src

Обираємо чергову точку і будуємо для неї регіон за допомогою функції ~region~.

#+begin_src rust :noweb yes :noweb-ref day12_1:Дії
  while let Some(plant) = plants.pop_first() {
      let region = region((rows, cols), plant, &mut plants);
      <<day12_1:Обчислити-периметр>>
  }
#+end_src

Площа регіону дорівнює розміру відповідного вектора, але для підрахунку периметру необхідно підрахувати
кількість напрямків, в которих у кожного елементу нема сусідів.

#+begin_src rust :noweb yes :noweb-ref day12_1:Обчислити-периметр
  let perm = region.iter()
      .map(|(row, col)| {
          (if *row == 0          { 1 } else if region.contains(&(*row - 1, *col)) { 0 } else { 1 })
          + (if *col == cols - 1 { 1 } else if region.contains(&(*row, *col + 1)) { 0 } else { 1 })
          + (if *row == rows - 1 { 1 } else if region.contains(&(*row + 1, *col)) { 0 } else { 1 })
          + (if *col == 0        { 1 } else if region.contains(&(*row, *col - 1)) { 0 } else { 1 })
      })
      .sum::<usize>();
  result += perm * region.len();
#+end_src

* Пошук регіону

Функція пошуку регіону ~region~ є рекурсивною. Результат містить, щонайменше, поточну точку.

#+begin_src rust :noweb yes :noweb-ref day12:Визначення
  fn region(
      size @ (rows, cols): (usize, usize),
      (pos @ (row, col), type_): ((usize, usize), char),
      plants: &mut BTreeSet<((usize, usize), char)>
  ) -> Vec<(usize, usize)> {
      let mut result = vec![pos];
      <<day12:region:Дії>>
      result
  }
#+end_src

Додаємо до регіону регіони усіх сусідів.

#+begin_src rust :noweb yes :noweb-ref day12:region:Дії
  if row > 0        { if let Some(plant) = plants.take(&((row - 1, col), type_)) { result.extend(region(size, plant, plants)); }}
  if col < cols - 1 { if let Some(plant) = plants.take(&((row, col + 1), type_)) { result.extend(region(size, plant, plants)); }}
  if row < rows - 1 { if let Some(plant) = plants.take(&((row + 1, col), type_)) { result.extend(region(size, plant, plants)); }}
  if col > 0        { if let Some(plant) = plants.take(&((row, col - 1), type_)) { result.extend(region(size, plant, plants)); }}
#+end_src

* Частина 2

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day12_2.rs
  <<day12:Декларації>>
  <<day12_2:Декларації>>

  <<day12:Визначення>>
  <<day12_2:Визначення>>

  fn main() {
      let mut result: usize = 0;
      <<day12:Прочитати-дані>>
      <<day12_2:Дії>>
      println!("{}", result);
  }
#+end_src

Обираємо чергову точку і будуємо для неї регіон за допомогою функції ~region~.

#+begin_src rust :noweb yes :noweb-ref day12_2:Дії
  while let Some(plant) = plants.pop_first() {
      let region = region((rows, cols), plant, &mut plants);
      <<day12_2:Підрахувати-кількість-сторін>>
      result += region.len() * sides_count;
  }
#+end_src

Обчислимо межі регіону.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін
  let rbegin = region.iter().map(|(r, _)| *r).min().unwrap();
  let rend = region.iter().map(|(r, _)| *r).max().unwrap() + 1;
  let cbegin = region.iter().map(|(_, c)| *c).min().unwrap();
  let cend = region.iter().map(|(_, c)| *c).max().unwrap() + 1;
#+end_src

Сторони необхідно підраховувати для кожного напрямку окремо. Визначимо лічильник сторін.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін
  let mut sides_count = 0;
#+end_src

** Верхні сторони

Перебираємо усі рядки, і в кожному рядку перебираємо колонки, перевіряючи, чи належить точка зверху до
того ж самого регіону.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін
  for row in rbegin..rend {
      let mut col = cbegin;
      while col < cend {
          <<day12_2:Підрахувати-кількість-сторін:Обробити-верхні-сторони>>
      }
  }
#+end_src

Знаходимо початковий стовпець для рядка.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-верхні-сторони
  while col < cend && !region.contains(&(row, col)) { col += 1 }
#+end_src

Якщо точка зверху належить регіону, то поточна точка є внутрішньою. Пропускаємо всі такі точки.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-верхні-сторони
  while col < cend
      && region.contains(&(row, col))
      && (row > 0 && region.contains(&(row - 1, col))) { col += 1 }
#+end_src

Якщо точка зверху не належить регіону, то поточна точка є зовнішньою. Збільшуємо кількість сторон і
пропускаємо усі точки сторони.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-верхні-сторони
  if col < cend
      && region.contains(&(row, col))
      && (row == 0 || !region.contains(&(row - 1, col))) {
      sides_count += 1;
      while col < cend
          && region.contains(&(row, col))
          && (row == 0 || !region.contains(&(row - 1, col))) { col += 1 }
  }
#+end_src

** Нижні сторони

Перебираємо усі рядки, і в кожному рядку перебираємо колонки, перевіряючи, чи належить точка знизу до
того ж самого регіону.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін
  for row in rbegin..rend {
      let mut col = cbegin;
      while col < cend {
          <<day12_2:Підрахувати-кількість-сторін:Обробити-нижні-сторони>>
      }
  }
#+end_src

Знаходимо початковий стовпець для рядка.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-нижні-сторони
  while col < cend && !region.contains(&(row, col)) { col += 1 }
#+end_src

Якщо точка знизу належить регіону, то поточна точка є внутрішньою. Пропускаємо всі такі точки.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-нижні-сторони
  while col < cend
      && region.contains(&(row, col))
      && (row < rows - 1 && region.contains(&(row + 1, col))) { col += 1 }
#+end_src

Якщо точка знизу не належить регіону, то поточна точка є зовнішньою. Збільшуємо кількість сторон і
пропускаємо усі точки сторони.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-нижні-сторони
  if col < cend
      && region.contains(&(row, col))
      && (row == rows - 1 || !region.contains(&(row + 1, col))) {
      sides_count += 1;
      while col < cend
          && region.contains(&(row, col))
          && (row == rows - 1 || !region.contains(&(row + 1, col))) { col += 1 }
  }
#+end_src

** Ліві сторони

Перебираємо усі стовпці, і в кожному стовпці перебираємо рядки, перевіряючи, чи належить точка зліва до
того ж самого регіону.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін
  for col in cbegin..cend {
      let mut row = rbegin;
      while row < rend {
          <<day12_2:Підрахувати-кількість-сторін:Обробити-ліві-сторони>>
      }
  }
#+end_src

Знаходимо початковий стовпець для рядка.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-ліві-сторони
  while row < rend && !region.contains(&(row, col)) { row += 1 }
#+end_src

Якщо точка зліва належить регіону, то поточна точка є внутрішньою. Пропускаємо всі такі точки.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-ліві-сторони
  while row < rend
      && region.contains(&(row, col))
      && (col > 0 && region.contains(&(row, col - 1))) { row += 1 }
#+end_src

Якщо точка зліва не належить регіону, то поточна точка є зовнішньою. Збільшуємо кількість сторон і
пропускаємо усі точки сторони.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-ліві-сторони
  if row < rend
      && region.contains(&(row, col))
      && (col == 0 || !region.contains(&(row, col - 1))) {
      sides_count += 1;
      while row < rend
          && region.contains(&(row, col))
          && (col == 0 || !region.contains(&(row, col - 1))) { row += 1 }
  }
#+end_src

** Праві сторони

Перебираємо усі стовпці, і в кожному стовпці перебираємо рядки, перевіряючи, чи належить точка зправа до
того ж самого регіону.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін
  for col in cbegin..cend {
      let mut row = rbegin;
      while row < rend {
          <<day12_2:Підрахувати-кількість-сторін:Обробити-праві-сторони>>
      }
  }
#+end_src

Знаходимо початковий стовпець для рядка.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-праві-сторони
  while row < rend && !region.contains(&(row, col)) { row += 1 }
#+end_src

Якщо точка зправа належить регіону, то поточна точка є внутрішньою. Пропускаємо всі такі точки.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-праві-сторони
  while row < rend
      && region.contains(&(row, col))
      && (col < cols - 1 && region.contains(&(row, col + 1))) { row += 1 }
#+end_src

Якщо точка зправа не належить регіону, то поточна точка є зовнішньою. Збільшуємо кількість сторон і
пропускаємо усі точки сторони.

#+begin_src rust :noweb yes :noweb-ref day12_2:Підрахувати-кількість-сторін:Обробити-праві-сторони
  if row < rend
      && region.contains(&(row, col))
      && (col == cols - 1 || !region.contains(&(row, col + 1))) {
      sides_count += 1;
      while row < rend
          && region.contains(&(row, col))
          && (col == cols - 1 || !region.contains(&(row, col + 1))) { row += 1 }
  }
#+end_src

