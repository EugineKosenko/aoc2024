#+title: Adventure of Code, 2024, день 10, =Rust=

* Частина 1

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day10_1.rs
  <<day10:Декларації>>
  <<day10_1:Декларації>>

  <<day10:Визначення>>
  <<day10_1:Визначення>>

  fn main() {
      <<day10:Прочитати-дані>>
      <<day10_1:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядки із файла.

#+begin_src rust :noweb-ref day10:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day10:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let lines = io::BufReader::new(file).lines();
#+end_src

Створимо матрицю висот.

#+begin_src rust :noweb-ref day10:Прочитати-дані
  let mut grid = grid::Grid::new(0, 0);
  for line in lines {
      grid.push_row(line.unwrap().chars().map(|c| c.to_digit(10).unwrap()).collect());
  }
#+end_src

* Перебір пошукових точок

#+begin_src rust :noweb-ref day10_1:Дії
  let result = grid.indexed_iter()
      .map(|((row, col), &val)| if val == 0 {
          let ends = path_ends(&grid, row, col, 0);
          ends.len()
      } else { 0 })
      .sum::<usize>();
#+end_src

* Пошук кінцевих точок

Реалізуємо рекурсивний пошук кінцевих точок в функціі ~path_ends~.

#+begin_src rust :noweb-ref day10_1:Декларації
  use std::collections::BTreeSet;
#+end_src

#+begin_src rust :noweb-ref day10_1:Визначення
  fn path_ends(grid: &grid::Grid<u32>, row: usize, col: usize, val: u32) -> BTreeSet<(usize, usize)> {
      let mut result = BTreeSet::new();
      if val == 9 {
          result.insert((row, col));
          return result;
      }

      if row > 0 && *grid.get(row - 1, col).unwrap() == val + 1 {
          result = result.union(&path_ends(grid, row - 1, col, val + 1)).cloned().collect();
      }
      if row < grid.rows() - 1 && *grid.get(row + 1, col).unwrap() == val + 1 {
          result = result.union(&path_ends(grid, row + 1, col, val + 1)).cloned().collect();
      }
      if col > 0 && *grid.get(row, col - 1).unwrap() == val + 1 {
          result = result.union(&path_ends(grid, row, col - 1, val + 1)).cloned().collect();
      }
      if col < grid.cols() - 1 && *grid.get(row, col + 1).unwrap() == val + 1 {
          result = result.union(&path_ends(grid, row, col + 1, val + 1)).cloned().collect();
      }
      result
  }
#+end_src

* Частина 2

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day10_2.rs
  <<day10:Декларації>>

  <<day10:Визначення>>
  <<day10_2:Визначення>>

  fn main() {
      <<day10:Прочитати-дані>>
      <<day10_2:Дії>>
      println!("{}", result);
  }
#+end_src

* Перебір пошукових точок

#+begin_src rust :noweb-ref day10_2:Дії
  let result = grid.indexed_iter()
      .map(|((row, col), &val)| if val == 0 {
          path_counts(&grid, row, col, 0)
      } else { 0 })
      .sum::<usize>();
#+end_src

* Пошук шляхів

Реалізуємо рекурсивне обчислення кількості шляхів в функціі ~path_counts~.

#+begin_src rust :noweb-ref day10_2:Визначення
  fn path_counts(grid: &grid::Grid<u32>, row: usize, col: usize, val: u32) -> usize {
      if val == 9 { return 1; }

      let mut result = 0;
      if row > 0 && *grid.get(row - 1, col).unwrap() == val + 1 {
          result += path_counts(grid, row - 1, col, val + 1);
      }
      if row < grid.rows() - 1 && *grid.get(row + 1, col).unwrap() == val + 1 {
          result += path_counts(grid, row + 1, col, val + 1);
      }
      if col > 0 && *grid.get(row, col - 1).unwrap() == val + 1 {
          result += path_counts(grid, row, col - 1, val + 1);
      }
      if col < grid.cols() - 1 && *grid.get(row, col + 1).unwrap() == val + 1 {
          result += path_counts(grid, row, col + 1, val + 1);
      }
      result
  }
#+end_src


