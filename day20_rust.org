#+title: Adventure of Code, 2024, день 20, =Rust=

Задача на хвильовий алгоритм для розв'ання лабіринтів, але цього разу один раз за все проходження можна
пройти скрізь стінку.

* Частина 1

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day20_1.rs
  <<day20:Декларації>>

  <<day20:Визначення>>

  fn main() {
      <<day20:Прочитати-дані>>
      let mut result = 0;
      <<day20:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядки із файла.

#+begin_src rust :noweb-ref day20:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day20:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let lines = io::BufReader::new(file)
      .lines()
      .map(|line| line.unwrap());
#+end_src

Прочитаємо дошку. 

#+begin_src rust :noweb-ref day20:Визначення
  type Board = grid::Grid<char>;
#+end_src

#+begin_src rust :noweb-ref day20:Прочитати-дані
  let mut board = Board::new(0, 0);
  for line in lines {
      board.push_row(line.chars().collect());
  }
#+end_src

Встановимо координати початкової і кінцевої точки.

#+begin_src rust :noweb-ref day20:Прочитати-дані
  let mut start = (0, 0);
  for (pt, &ch) in board.indexed_iter() {
      if ch == 'S' {
          start = pt;
          break;
      }
  }

  let mut finish = (0, 0);
  for (pt, &ch) in board.indexed_iter() {
      if ch == 'E' {
          finish = pt;
          break;
      }
  }
#+end_src

* Точки

#+begin_src rust :noweb-ref day20:Визначення
  type Point = (usize, usize);

  fn is_inside(point: Point, board: &Board) -> bool {
      point.0 < board.rows() && point.1 < board.cols()
  }
#+end_src

* Кроки

#+begin_src rust :noweb-ref day20:Визначення
  type Step = (isize, isize);

  const STEPS: [Step; 4] = [(-1, 0), (0, 1), (1, 0), (0, -1)];

  fn next(point: Point, step: Step, board: &Board) -> Option<Point> {
      (point.0 as isize + step.0).try_into().ok()
          .and_then(|row| {
              (point.1 as isize + step.1).try_into().ok()
                  .and_then(|col| {
                      if is_inside((row, col), board) { Some((row, col)) } else { None }
                  })
          })
  }
#+end_src

* Пошук шляху

Згідно до умов задачі є тільки один правильний шлях. Щоб знайти його, достатньо почати с початкової
точки, і потім кожний раз знаходити сусідню вільну точку, яка не належить шляху.

#+begin_src rust :noweb-ref day20:Дії
  let mut path = vec![start];
  let mut point = start;
  while point != finish {
      point = STEPS.iter()
          .find_map(|&step| {
              next(point, step, &board)
                  .and_then(|next| {
                      if *board.get(next.0, next.1).unwrap() != '#' && !path.contains(&next) {
                          Some(next)
                      } else {
                          None
                      }
                  })
          }).unwrap();
      path.push(point);
  }
#+end_src

* Пошук пробоїв

Перебираємо усі точки шляху, і для кожної точки шукаємо пробої. Водночас визначаємо порядковий номер
точки шляху, що обробляється, це знадобиться при обробці пробою.

#+begin_src rust :noweb-ref day20:Декларації
  use std::collections::BTreeMap;
#+end_src

#+begin_src rust :noweb yes :noweb-ref day20:Дії
  let mut map = BTreeMap::<usize, usize>::new();
  for (n, start) in path.iter().enumerate() {
      if *start != finish {
          <<day20:Знайти-пробої>>
          <<day20:Обробити-пробої>>
      }
  }
  println!("{:?}", map);
#+end_src

Пробої різняться не тільки кінцевими точками, але й довжиною, тому тут не підходить хвильовий алгоритм,
який завжди знаходить найкоротший шлях. Замість цього використовуємо прямий рекурсивний перебір можливих
шляхів заданої довжини.

Створимо множину пробоїв.

#+begin_src rust :noweb-ref day20:Знайти-пробої
  let mut brdowns = BTreeSet::new();
#+end_src

Перебираємо усіх сусідів початкової точки, які є стінками, за виключенням кордонів дошки. Для кожної
такої точки викликаємо рекурсивний пошук пробоїв зі збиранням результатів у множину.

#+begin_src rust :noweb-ref day20:Декларації
  use std::collections::BTreeSet;
#+end_src

#+begin_src rust :noweb-ref day20:Знайти-пробої
  for step in STEPS {
      if let Some(next) = next(*start, step, &board) {
          if next.0 > 0 && next.0 < board.rows() - 1
              && next.1 > 0 && next.1 < board.cols() - 1
              && *board.get(next.0, next.1).unwrap() == '#' {
                  find_brdowns(&board, limit, next, &BTreeSet::new(), &mut brdowns);
              }
      }
  }
  //println!("{:?} {:?}", start, brdowns);
#+end_src

При пошуку використовуємо межу, яка задається як другий аргумент програми. По суті, в першій частині
~limit=1~, а в другій --- ~limit=20~, тому обидві частини можна рішити одним і тим же кодом.

#+begin_src rust :noweb-ref day20:Прочитати-дані
  let limit = args[2].parse::<usize>().unwrap();
#+end_src

#+begin_src rust :noweb yes :noweb-ref day20:Визначення
  fn find_brdowns(board: &Board, limit: usize,
                  point: Point, path: &BTreeSet<Point>,
                  brdowns: &mut BTreeSet<(Point, usize)>) {
      <<day20:find-brdowns:Дії>>
  }
#+end_src

Якщо довжина шляху дорівнює межі, припиняємо пошук.

#+begin_src rust :noweb yes :noweb-ref day20:find-brdowns:Дії
  if path.len() == limit { return; }
#+end_src

Створимо новий шлях, додавши точку до існуючого шляху. 

#+begin_src rust :noweb yes :noweb-ref day20:find-brdowns:Дії
  let mut path = path.clone();
  path.insert(point);
#+end_src

Перебираємо усіх сусідів точки, які не є кордонами дошки. Якщо це вільна точка,
додаємо її як пробій, інакше шукаємо пробої рекурсивно, якщо точка не належить шляху.

#+begin_src rust :noweb yes :noweb-ref day20:find-brdowns:Дії
  for step in STEPS {
      if let Some(next) = next(point, step, board) {
          if next.0 > 0 && next.0 < board.rows() - 1
              && next.1 > 0 && next.1 < board.cols() - 1 {
                  if *board.get(next.0, next.1).unwrap() == '#' {
                      if !path.contains(&next) {
                          find_brdowns(board, limit, next, &path, brdowns);
                      }
                  } else {
                      brdowns.insert((next, path.len() + 1));
                  }
              }
      }
  }
#+end_src

** COMMENT [Застаріло] Хвильовий алгоритм

При пошуку пробою ми вирішуємо "зворотню" задачу, коли вважаємо доступними тільки стінки, а будь-яка
вільна точка розглядається як "перешкода". Однак при цьому у нас нема кінцевої точки, але у нас є межа,
після якої неможливо виконувати пошук пробоїв. При цьому пробоєм вважаємо будь-яку проміжну точку, у якої
є хоча б один вільний сусід.

Створимо матрицю відстаней.

#+begin_src rust :noweb-ref day20:Знайти-пробої
  let mut dists = grid::Grid::init(board.rows(), board.cols(), 0);
#+end_src

Створимо чергу і додамо туди усіх сусідів початкової точки, які є стінками, за виключенням кордонів
дошки. Черга впорядкована за відстанями.

#+begin_src rust :noweb-ref day20:Декларації
  use std::collections::BTreeSet;
#+end_src

#+begin_src rust :noweb-ref day20:Знайти-пробої
  let mut queue = STEPS.iter()
      .filter_map(|&step| {
          next(*start, step, board)
              .and_then(|next| {
                  if next.0 > 0 && next.0 < board.rows() - 1
                      && next.1 > 0 && next.1 < board.cols() - 1
                      && *board.get(next.0, next.1).unwrap() == '#' {
                      Some((1, next))
                  } else {
                      None
                  }
              })
      })
      .collect::<BTreeSet<_>>();
#+end_src

Перебираємо точки в черзі, поки вона не стане пустою.

#+begin_src rust :noweb yes :noweb-ref day20:Знайти-пробої
  while let Some((dist, point)) = queue.pop_first() {
      <<day20:Обробити-точку-пробою>>
  }
#+end_src

Встановлюємо відстань.

#+begin_src rust :noweb-ref day20:Обробити-точку-пробою
  ,*dists.get_mut(point.0, point.1).unwrap() = dist;
#+end_src

Перебираємо усіх сусідів точки.

#+begin_src rust :noweb yes :noweb-ref day20:Обробити-точку-пробою
  for step in STEPS {
      if let Some(next) = next(point, step, board) {
          <<day20:Обробити-сусіда-точки-пробою>>
      }
  }
#+end_src

Відкидаємо точки на кордоні дошки.

#+begin_src rust :noweb yes :noweb-ref day20:Обробити-сусіда-точки-пробою
  if next.0 == 0 || next.0 == board.rows() - 1
      || next.1 == 0 || next.1 == board.cols() - 1 { continue; }
#+end_src

Якщо сусідом є вільна точка яка не є початковою, обробляємо знайдений пробій, інакше додаємо до черги
нову точку пробою, якщо відстань менше межи, яка задається як другий аргумент програми. По суті, в першій
частині ~limit=1~, а в другій --- ~limit=20~, тому обидві частини можна рішити одним і тим же кодом.

Важливо, що ми додаємо кінцеву точку, тільки якщо відповідна відстань ще не встановлена. Це попереджає
знаходження більш довгих пробоїв.

#+begin_src rust :noweb-ref day20:Прочитати-дані
  let limit = args[2].parse::<usize>().unwrap();
#+end_src

#+begin_src rust :noweb yes :noweb-ref day20:Обробити-сусіда-точки-пробою
  if *board.get(next.0, next.1).unwrap() == '#' {
      if dist < limit && *dists.get(next.0, next.1).unwrap() == 0 { queue.insert((dist + 1, next)); }
  } else if next != *start && *dists.get_mut(next.0, next.1).unwrap() == 0 {
      let dist = dist + 1;
      ,*dists.get_mut(next.0, next.1).unwrap() = dist;
      <<day20:Обробити-пробій>>
  }
#+end_src

* Обробка пробоїв

Обробляємо всі знайдені пробої в циклі.

#+begin_src rust :noweb yes :noweb-ref day20:Обробити-пробої
  for (finish, dist) in brdowns {
      <<day20:Обробити-пробій>>
  }
#+end_src

Точка пробою на шляху має знаходитись після початкової. Отримана позиція показує актуальну довжину шляху,
що скорочується. Для ефективності ця довжина має бути не менше довжини пробою з вказаною ефективністю.

Визначимо також додатково критерій ефективної різниці (=delta=), яка визначає мінімально необхідну
різницю між чесним та нечесним рішенням. Для відлагодження ~delta=1~ (в першій частині), ~delta=50~ (в
другій чстині), а в кінцевому рішенні ~delta=100~. Для універсальності отримаємо це значення як третій
аргумент програми.

#+begin_src rust :noweb-ref day20:Прочитати-дані
  let delta = args[3].parse::<usize>().unwrap();
#+end_src

#+begin_src rust :noweb-ref day20:Обробити-пробій
  if let Some(m) = path.iter().skip(n + 1).position(|&point| point == finish) {
      let m = m + 1;
      if dist + delta <= m {
          //println!("{:?}", (start, finish, dist));
          ,*map.entry(m - dist).or_default() += 1;
          result += 1;
      }
  };
#+end_src
