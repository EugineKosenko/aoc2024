#+title: Adventure of Code, 2024, день 11, =Rust=

* Частина 1

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day11_1.rs
  <<day11:Декларації>>
  <<day11_1:Декларації>>

  <<day11:Визначення>>
  <<day11_1:Визначення>>

  fn main() {
      let mut result: usize = 0;
      <<day11:Прочитати-дані>>
      <<day11_1:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядок із файла, при цьому одразу розберемо його і створимо вектор значень.

#+begin_src rust :noweb-ref day11:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day11:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let values = io::BufReader::new(file)
      .lines().next().unwrap().unwrap()
      .split(' ')
      .map(|value| value.parse::<usize>().unwrap())
      .collect::<Vec<_>>();
#+end_src

Виконуємо цикли. Для оптимізації виконуємо обчислення в рекурсивній функціі ~size~. Для ефективності
використовуємо кеш.

#+begin_src rust :noweb-ref day11:Декларації
  use std::collections::BTreeMap;
#+end_src

#+begin_src rust :noweb-ref day11_1:Дії
  let mut cache = BTreeMap::new();
  for value in values {
      result += size(value, 25, &mut cache);
  }
#+end_src

* Рекурсивний обхід

#+begin_src rust :noweb-ref day11:Визначення
  fn size(value: usize, count: usize, cache: &mut BTreeMap<(usize, usize), usize>) -> usize {
      cache.get(&(value, count))
          .copied()
          .unwrap_or_else(|| {
              let result = if count == 0 {
                  1
              } else if value == 0 {
                  size(1, count - 1, cache)
              } else {
                  let len = (value as f32).log10().floor() as u32 + 1;
                  if len % 2 == 0 {
                      let p = 10_usize.pow(len / 2);
                      size(value / p, count - 1, cache) + size(value % p, count - 1, cache)
                  } else {
                      size(value.checked_mul(2024).unwrap(), count - 1, cache)
                  }
              };
              cache.insert((value, count), result);
              result
          })
  }
#+end_src

* Частина 2

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day11_2.rs
  <<day11:Декларації>>
  <<day11_2:Декларації>>

  <<day11:Визначення>>
  <<day11_2:Визначення>>

  fn main() {
      let mut result: usize = 0;
      <<day11:Прочитати-дані>>
      <<day11_2:Дії>>
      println!("{}", result);
  }
#+end_src

#+begin_src rust :noweb-ref day11_2:Дії
  let mut cache = BTreeMap::new();
  for value in values {
      result += size(value, 75, &mut cache);
  }
#+end_src

