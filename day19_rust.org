#+title: Adventure of Code, 2024, день 19, =Rust=

* Частина 1

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day19_1.rs
  <<day19:Декларації>>
  <<day19_1:Декларації>>

  <<day19:Визначення>>
  <<day19_1:Визначення>>

  fn main() {
      <<day19:Прочитати-дані>>
      <<day19_1:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядки із файла.

#+begin_src rust :noweb-ref day19:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day19:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let mut lines = io::BufReader::new(file)
      .lines()
      .map(|line| line.unwrap());
#+end_src

Прочитаємо рушники.

#+begin_src rust :noweb-ref day19:Прочитати-дані
  let line = lines.next().unwrap();
  let towels = line.split(", ").collect::<Vec<_>>();
  lines.next().unwrap();
#+end_src

Рекурсивно перевіримо кожний зразок на відповідність і підрахуємо кількість можливих зразків.

#+begin_src rust :noweb-ref day19_1:Дії
  let result = lines.filter(|design| check(design, &towels)).count();
#+end_src

* Перевірка зразка

#+begin_src rust :noweb yes :noweb-ref day19_1:Визначення
  fn check(design: &str, towels: &[&str]) -> bool {
      if design.is_empty() { return true; }
      for towel in towels {
          if let Some(design) = design.strip_prefix(towel) {
              if check(design, towels) { return true; }
          }
      }
      false
  }
#+end_src

* Частина 2

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day19_2.rs
  <<day19:Декларації>>
  <<day19_2:Декларації>>

  <<day19:Визначення>>
  <<day19_2:Визначення>>

  fn main() {
      <<day19:Прочитати-дані>>
      <<day19_2:Дії>>
      println!("{}", result);
  }
#+end_src

Для оптимізації створимо кеш обрахованих кількостей.

#+begin_src rust :noweb-ref day19_2:Декларації
  use std::collections::BTreeMap;
#+end_src

#+begin_src rust :noweb-ref day19_2:Дії
  let mut counts = BTreeMap::new();
#+end_src

Рекурсивно підрахуємо кількість комбінацій для кожного зразка і підрахуємо кількість цих комбінацій.

#+begin_src rust :noweb-ref day19_2:Дії
  let result = lines
      .map(|design| combs_count(&design, &towels, &mut counts)).sum::<usize>();
#+end_src

* Підрахунок кількості комбінацій

#+begin_src rust :noweb yes :noweb-ref day19_2:Визначення
  fn combs_count(design: &str, towels: &[&str], counts: &mut BTreeMap<String, usize>) -> usize {
      if design.is_empty() { return 1; }
      if let Some(count) = counts.get(design) { return *count; }
      towels.iter()
          .filter_map(|towel| {
              design.strip_prefix(towel)
                  .map(|design| {
                      let count = combs_count(design, towels, counts);
                      counts.insert(design.to_string(), count);
                      count
                  })
          })
          .sum()
  }
#+end_src
