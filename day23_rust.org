#+title: Adventure of Code, 2024, день 23, =Rust=

* Частина 1

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day23_1.rs
  <<day23:Декларації>>
  <<day23_1:Декларації>>

  <<day23:Визначення>>
  <<day23_1:Визначення>>

  fn main() {
      <<day23:Прочитати-дані>>
      <<day23_1:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядки із файла.

#+begin_src rust :noweb-ref day23:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day23:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let lines = io::BufReader::new(file)
      .lines()
      .map(|line| line.unwrap());
#+end_src

Прочитаємо усі зв'язки. При цьому ми створюємо мапу-довідник /сусідів/ (=nghbr=) кожного вузла, а
також перелік усіх /зв'язків/ (=link=), причому, оскільки зв'язки симетричні, додаємо два зв'язки, а для
кожного вузла з пари вказуємо інший вузол як сусіда.

#+begin_src rust :noweb-ref day23:Декларації
  use std::collections::{BTreeSet, BTreeMap};
#+end_src

#+begin_src rust :noweb-ref day23:Прочитати-дані
  let mut nghbrs = BTreeMap::<String, Cluster>::new();
  let mut links = BTreeSet::new();
  for line in lines {
      let (c1, c2) = line.split_once('-').unwrap();
      links.insert((c1.to_string(), c2.to_string()));
      links.insert((c2.to_string(), c1.to_string()));
      nghbrs.entry(c1.to_string()).or_default().insert(c2.to_string());
      nghbrs.entry(c2.to_string()).or_default().insert(c1.to_string());
  }
#+end_src

Переберемо усі вузли, для кожного будуємо перше замикання, яке не містить початкової точки, а потім для
кожного вузла з замикання будуємо друге замикання, також без нової початкової точки. В побудованому
замиканні відберемо тільки ті вузли, у яких є (циклічний) зв'язок з першим вузлом, і виводимо усі трійки
з вузлів.

Додатково на коєному кроці відбираємо тільки ті трійки, де назва вузла починається з ~t~.

Треба також врахувати, що порядок вузлів в трійці не має значення, тому представляємо трійки як множини.

#+begin_src rust :noweb-ref day23_1:Дії
  let triads = nghbrs.iter()
      .flat_map(|(first, seconds)| {
          seconds.iter()
              .filter(|second| first.clone() != **second)
              .flat_map(|second| {
                  nghbrs.get(second).unwrap().iter()
                      .filter_map(|third| {
                          if second.clone() != *third
                              && links.contains(&(third.clone(), first.clone()))
                              && (first.starts_with('t') || second.starts_with('t') || third.starts_with('t')) {
                                  Some(BTreeSet::from([first.clone(), second.clone(), third.clone()]))
                              } else {
                                  None
                              }
                      })
              })
      })
      .collect::<BTreeSet<_>>();
  let result = triads.len();
#+end_src

* Набори

/Кластер/ (=cluster=) є просто множиною (~BTreeSet~) вузлів.

#+begin_src rust :noweb-ref day23:Визначення
  type Cluster = BTreeSet<String>;
#+end_src

* Частина 2

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day23_2.rs
  <<day23:Декларації>>
  <<day23_2:Декларації>>

  <<day23:Визначення>>
  <<day23_2:Визначення>>

  fn main() {
      <<day23:Прочитати-дані>>
      <<day23_2:Дії>>
      println!("{}", result);
  }
#+end_src

Для зручності визначимо множину вузлів як окрему структуру.

#+begin_src rust :noweb-ref day23_2:Дії
  let nodes = nghbrs.keys().cloned().collect::<BTreeSet<String>>();
#+end_src

Визначимо множину вузлів, які відвідано. Спочатку ця множина пуста.

#+begin_src rust :noweb-ref day23_2:Дії
  let mut visited = BTreeSet::new();
#+end_src

Послідовно перебираємо усі ще не відвідані вузли, і кожний такий вузол розглядаємо як початковий для
створення кластеру. Відбираємо кластер з максимальним розміром.

#+begin_src rust :noweb yes :noweb-ref day23_2:Дії
  let result = nodes.into_iter()
      .filter_map(|start| {
          if visited.contains(&start) { None } else {
              <<day23_2:Створити-кластер>>
              Some(cluster)
          }
      })
      .max_by_key(|cluster| cluster.len())
      .unwrap();
#+end_src

Спочатку кластер пустий.

#+begin_src rust :noweb-ref day23_2:Створити-кластер
  let mut cluster = Cluster::new();
#+end_src

Створимо чергу вузлів, в який спочатку поміщаємо початковий вузол.

#+begin_src rust :noweb-ref day23_2:Створити-кластер
  let mut queue = BTreeSet::from([start]);
#+end_src

Перебираємо вузли з черги, які ще не відвідано, але які пов'язані з усіма вузлами кластера, і додаємо їх
до кластеру і до відвіданих вузлів. Після цього додаємо до черги усіх ще не відвіданих сусідів поточного
вузла.

#+begin_src rust :noweb-ref day23_2:Створити-кластер
  while let Some(node) = queue.pop_first() {
      if !visited.contains(&node) && cluster.is_subset(nghbrs.get(&node).unwrap()) {
          visited.insert(node.clone());
          cluster.insert(node.clone());
          queue = queue.union(&nghbrs.get(&node).unwrap().difference(&visited).cloned().collect()).cloned().collect();
      }
  }
#+end_src

Перетворимо результат для виводу.

#+begin_src rust :noweb-ref day23_2:Дії
  let result = itertools::intersperse(result, ",".to_string()).collect::<String>();
#+end_src
