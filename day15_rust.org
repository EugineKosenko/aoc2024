#+title: Adventure of Code, 2024, день 15, =Rust=

* Частина 1

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day15_1.rs
  <<day15:Декларації>>
  <<day15_1:Декларації>>

  <<day15:Визначення>>
  <<day15_1:Визначення>>

  fn main() {
      let mut result = 0;
      <<day15:Прочитати-дані>>
      <<day15_1:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо рядки із файла.

#+begin_src rust :noweb-ref day15:Декларації
  use std::{fs, env, io::{self, BufRead}};
#+end_src

#+begin_src rust :noweb-ref day15:Прочитати-дані
  let args: Vec<String> = env::args().collect();
  let file = fs::File::open(&args[1]).unwrap();
  let mut lines = io::BufReader::new(file)
      .lines()
      .map(|line| line.unwrap());
#+end_src

Прочитаємо дошку. 

#+begin_src rust :noweb-ref day15_1:Дії
  let mut board = grid::Grid::new(0, 0);
  for line in lines.by_ref() {
      if line.is_empty() { break; }
      board.push_row(line.chars().collect());
  }
#+end_src

Отримаємо початкові координати робота.

#+begin_src rust :noweb-ref day15_1:Дії
  let mut point = (0, 0);
  for (pt, &ch) in board.indexed_iter() {
      if ch == '@' {
          point = pt;
          break;
      }
  }
#+end_src

Далі перебираємо команди і обробляємо їх.

#+begin_src rust :noweb yes :noweb-ref day15_1:Дії
  for line in lines.by_ref() {
      for command in line.chars() {
          <<day15_1:Обробити-команду>>
      }
  }
#+end_src

* Ітератор по точках

#+begin_src rust :noweb yes :noweb-ref day15_1:Визначення
  struct PointIter {
      point: (usize, usize),
      delta: (isize, isize)
  }

  impl PointIter {
      fn new(point: (usize, usize), delta: (isize, isize)) -> Self {
          PointIter { point, delta }
      }
  }

  impl Iterator for PointIter {
      type Item = (usize, usize);

      fn next(&mut self) -> Option<Self::Item> {
          self.point.0 = ((self.point.0 as isize) + self.delta.0).try_into().unwrap();
          self.point.1 = ((self.point.1 as isize) + self.delta.1).try_into().unwrap();
          Some(self.point)
      }
  }
#+end_src

* Обробка команди

Визначимо напрямок руху.

#+begin_src rust :noweb-ref day15_1:Обробити-команду
  let delta = match command {
      '^' => (-1, 0),
      '>' => (0, 1),
      'v' => (1, 0),
      '<' => (0, -1),
      c => panic!("Unexpected command {}", c)
  };    
#+end_src

Переберемо усі точки в напрямку руху, при цьому перебір зупиняється, коли в позиції на дошці
зустрічається стінка (~#~). Після цього ми намагаємось знайти першу вільну точку (~.~). Якщо такої точки
нема, то нічого не відбувається, інакше рухаємось до цієї точки.

#+begin_src rust :noweb yes :noweb-ref day15_1:Обробити-команду
  if let Some(empty_point) = PointIter::new(point, delta)
      .take_while(|(row, col)| *board.get(*row, *col).unwrap() != '#')
      .find(|(row, col)| *board.get(*row, *col).unwrap() == '.') {
          <<day15_1:Зробити-крок-у-напрямку>>
      }
#+end_src

Всі точки між поточною точкою робота та першою пустою точкою заповнені блоками (~0~). Тому достатньо
вилучити перший блок в напрямку і поставити його на місце пустої точки. Одразу на місце наступної точки
ставимо робота.

#+begin_src rust :noweb-ref day15_1:Зробити-крок-у-напрямку
  ,*board.get_mut(empty_point.0, empty_point.1).unwrap() = 'O';
  ,*board.get_mut(point.0, point.1).unwrap() = '.';
  point.0 = ((point.0 as isize) + delta.0).try_into().unwrap();
  point.1 = ((point.1 as isize) + delta.1).try_into().unwrap();
  ,*board.get_mut(point.0, point.1).unwrap() = '@';
#+end_src

* Підрахунок координат

#+begin_src rust :noweb-ref day15_1:Дії
  for ((row, col), ch) in board.indexed_iter() {
      if *ch == 'O' {
          result += 100 * row + col;
      }
  }
#+end_src

* Частина 2

#+begin_src rust :noweb yes :mkdirp yes :tangle src/bin/day15_2.rs
  <<day15:Декларації>>
  <<day15_2:Декларації>>

  <<day15:Визначення>>
  <<day15_2:Визначення>>

  fn main() {
      let mut result = 0;
      <<day15:Прочитати-дані>>
      <<day15_2:Дії>>
      println!("{}", result);
  }
#+end_src

Прочитаємо дошку. Цього разу ми маємо подвоїти усі символи відповідно до алгоритму.

#+begin_src rust :noweb-ref day15_2:Дії
  let mut board = grid::Grid::new(0, 0);
  for line in lines.by_ref() {
      if line.is_empty() { break; }
      board.push_row(
          line.chars()
              .flat_map(|ch| match ch {
                  '#' => "##",
                  'O' => "[]",
                  '.' => "..",
                  '@' => "@.",
                  ch => panic!("Unexpected point {}", ch)
              }.chars())
              .collect());
  }
#+end_src

Отримаємо початкові координати робота.

#+begin_src rust :noweb-ref day15_2:Дії
  let mut point = (0, 0);
  for (pt, &ch) in board.indexed_iter() {
      if ch == '@' {
          point = pt;
          break;
      }
  }
#+end_src

Далі перебираємо команди і обробляємо їх.

#+begin_src rust :noweb yes :noweb-ref day15_2:Дії
  for line in lines {
      for command in line.chars() {
          <<day15_2:Обробити-команду>>
      }
  }
#+end_src

* Обробка команди

Тепер обробка суттєво залежить від напрямку, тому розділимо варіанти за командою.

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-команду
  match command {
      '^' | 'v' => {
          <<day15_2:Обробити-вертикальну-команду>>
      },
      '>' => {
          <<day15_2:Обробити-команду-вправо>>
      },
      '<' => {
          <<day15_2:Обробити-команду-вліво>>
      },
      c => panic!("Unexpected command {}", c)
  }
#+end_src

** Команда вліво

Знаходимо першу стіну або вільну точку зліва.

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-команду-вліво
  for i in (0..point.1).rev() {
      let ch = *board.get(point.0, i).unwrap();
      if ch == '#' { break; } // стінка
      if ch == '.' { // вільна точка
          for j in (i..point.1).step_by(2) {
              ,*board.get_mut(point.0, j).unwrap() = '[';
              ,*board.get_mut(point.0, j + 1).unwrap() = ']';
          }
          ,*board.get_mut(point.0, point.1).unwrap() = '.';
          point.1 -= 1;
          ,*board.get_mut(point.0, point.1).unwrap() = '@';
          break;
      }
  }
#+end_src

** Команда вправо

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-команду-вправо
  for i in (point.1+1)..board.cols() {
      let ch = *board.get(point.0, i).unwrap();
      if ch == '#' { break; } // стінка
      if ch == '.' { // вільна точка
          for j in ((point.1+2)..i).step_by(2) {
              ,*board.get_mut(point.0, j).unwrap() = '[';
              ,*board.get_mut(point.0, j + 1).unwrap() = ']';
          }
          ,*board.get_mut(point.0, point.1).unwrap() = '.';
          point.1 += 1;
          ,*board.get_mut(point.0, point.1).unwrap() = '@';
          break;
      }
  }
#+end_src

** Вертикальна команда

Вертикальні команди (вверх і вниз) обробляються однаково, однак треба визначити напрямок руху.

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-вертикальну-команду
  let delta = match command {
      '^' => -1,
      'v' => 1,
      c => panic!("Unexpected command {}", c)
  };
#+end_src

Визначимо наступний рядок.

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-вертикальну-команду
  let row = (point.0 as isize + delta).try_into().unwrap();
#+end_src

Перевіримо точку наступну точку. Якщо це стінка, то рух роботу блокується, якщо це вільна точка, то робот
просто переміщується, в іншому випадку обробляємо рух.

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-вертикальну-команду
  match *board.get(row, point.1).unwrap() {
      '#' => { /* стінка */ },
      '.' => {
          ,*board.get_mut(point.0, point.1).unwrap() = '.';
          point.0 = row;
          ,*board.get_mut(point.0, point.1).unwrap() = '@';
      },
      '[' | ']' => {
          <<day15_2:Обробити-рух>>
      },
      c => panic!("Unexpected block {}", c)
  }
#+end_src

При обробці руху створимо /фронт/ (=front=) --- множину точок блоків, які знаходяться в наступному рядку поруч з
роботом.

#+begin_src rust :noweb yes :noweb-ref day15_2:Декларації
  use std::collections::BTreeSet;
#+end_src

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-рух
  let mut front = BTreeSet::new();
#+end_src

В цю множину входить точка пезпосередньо поруч з роботом, а також точка зліва або зправа в залежності від
символу блоку.

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-рух
  front.insert((row, point.1));
  front.insert((row, match *board.get(row, point.1).unwrap() {
      '[' => point.1 + 1,
      ']' => point.1 - 1,
      c => panic!("Unexpected block {}", c)
  }));
#+end_src

Рекурсивно штовхаємо фронт, і якщо він рухається, рухаємо також робота.

#+begin_src rust :noweb yes :noweb-ref day15_2:Обробити-рух
  if push(&mut board, front, delta) {
      ,*board.get_mut(point.0, point.1).unwrap() = '.';
      point.0 = row;
      ,*board.get_mut(point.0, point.1).unwrap() = '@';
  }
#+end_src

#+begin_src rust :noweb yes :noweb-ref day15_2:Визначення
  fn push(board: &mut grid::Grid<char>, front: BTreeSet<(usize, usize)>, delta: isize) -> bool {
      <<day15_2:push:Дії>>
  }
#+end_src

Визначимо рядок наступного фронту.

#+begin_src rust :noweb yes :noweb-ref day15_2:push:Дії
  let row: usize = (front.first().unwrap().0 as isize + delta).try_into().unwrap();
#+end_src

Створимо наступний фронт.

#+begin_src rust :noweb yes :noweb-ref day15_2:push:Дії
  let mut nfront = BTreeSet::new();
#+end_src

Перебираємо точки поточного фронту. Якщо у точки в наступному рядку стінка, то рух фронту неможливий,
тому перериваємо обчислення і повертаємо сигнал неможливості руху.

#+begin_src rust :noweb yes :noweb-ref day15_2:push:Дії
  for &(_, col) in &front {
      match *board.get(row, col).unwrap() {
          '#' => { return false; },
          '.' => { /* nothing */ },
          c @ '[' | c @ ']' => {
              nfront.insert((row, col));
              nfront.insert((row, match c {
                  '[' => col + 1,
                  ']' => col - 1,
                  c => panic!("Unexpected block {}", c)
              }
              ));
          },
          c => panic!("Unexpected block {}", c)
      }
  }
#+end_src

Якщо новий фронт пустий, або його можна перемістити, то і поточний фронт можна перемістити.

#+begin_src rust :noweb yes :noweb-ref day15_2:push:Дії
  if nfront.is_empty() || push(board, nfront, delta) {
      for (r, col) in front {
          ,*board.get_mut(row, col).unwrap() = *board.get(r, col).unwrap();
          ,*board.get_mut(r, col).unwrap() = '.';
      }
      true
  } else {
      false
  }
#+end_src

* Підрахунок координат

#+begin_src rust :noweb-ref day15_2:Дії
  for ((row, col), ch) in board.indexed_iter() {
      if *ch == '[' {
          result += 100 * row + col;
      }
  }
#+end_src

